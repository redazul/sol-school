{"message":"`main` function not found in crate `solana_bpf_helloworld`","code":{"code":"E0601","explanation":"No `main` function was found in a binary crate.\n\nTo fix this error, add a `main` function:\n\n```\nfn main() {\n    // Your program will start here.\n    println!(\"Hello world!\");\n}\n```\n\nIf you don't know the basics of Rust, you can look at the\n[Rust Book][rust-book] to get started.\n\n[rust-book]: https://doc.rust-lang.org/book/\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":1651,"line_start":1,"line_end":49,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"use borsh::{BorshDeserialize, BorshSerialize};","highlight_start":1,"highlight_end":47},{"text":"use solana_program::{","highlight_start":1,"highlight_end":22},{"text":"    account_info::{next_account_info, AccountInfo},","highlight_start":1,"highlight_end":52},{"text":"    entrypoint,","highlight_start":1,"highlight_end":16},{"text":"    entrypoint::ProgramResult,","highlight_start":1,"highlight_end":31},{"text":"    msg,","highlight_start":1,"highlight_end":9},{"text":"    program_error::ProgramError,","highlight_start":1,"highlight_end":33},{"text":"    pubkey::Pubkey,","highlight_start":1,"highlight_end":20},{"text":"};","highlight_start":1,"highlight_end":3},{"text":"","highlight_start":1,"highlight_end":1},{"text":"/// Define the type of state stored in accounts","highlight_start":1,"highlight_end":48},{"text":"#[derive(BorshSerialize, BorshDeserialize, Debug)]","highlight_start":1,"highlight_end":51},{"text":"pub struct GreetingAccount {","highlight_start":1,"highlight_end":29},{"text":"    /// number of greetings","highlight_start":1,"highlight_end":28},{"text":"    pub counter: u32,","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"// Declare and export the program's entrypoint","highlight_start":1,"highlight_end":47},{"text":"entrypoint!(process_instruction);","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"// Program entrypoint's implementation","highlight_start":1,"highlight_end":39},{"text":"pub fn process_instruction(","highlight_start":1,"highlight_end":28},{"text":"    program_id: &Pubkey, // Public key of the account the hello world program was loaded into","highlight_start":1,"highlight_end":94},{"text":"    accounts: &[AccountInfo], // The account to say hello to","highlight_start":1,"highlight_end":61},{"text":"    _instruction_data: &[u8], // Ignored, all helloworld instructions are hellos","highlight_start":1,"highlight_end":81},{"text":") -> ProgramResult {","highlight_start":1,"highlight_end":21},{"text":"    msg!(\"Hello World Rust program entrypoint\");","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Iterating accounts is safer than indexing","highlight_start":1,"highlight_end":49},{"text":"    let accounts_iter = &mut accounts.iter();","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Get the account to say hello to","highlight_start":1,"highlight_end":39},{"text":"    let account = next_account_info(accounts_iter)?;","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // The account must be owned by the program in order to modify its data","highlight_start":1,"highlight_end":76},{"text":"    if account.owner != program_id {","highlight_start":1,"highlight_end":37},{"text":"        msg!(\"Greeted account does not have the correct program id\");","highlight_start":1,"highlight_end":70},{"text":"        return Err(ProgramError::IncorrectProgramId);","highlight_start":1,"highlight_end":54},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Increment and store the number of times the account has been greeted","highlight_start":1,"highlight_end":76},{"text":"    let mut greeting_account = GreetingAccount::try_from_slice(&account.data.borrow())?;","highlight_start":1,"highlight_end":89},{"text":"    greeting_account.counter += 1;","highlight_start":1,"highlight_end":35},{"text":"    greeting_account.serialize(&mut &mut account.data.borrow_mut()[..])?;","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    msg!(\"Greeted {} time(s)!\", greeting_account.counter);","highlight_start":1,"highlight_end":59},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    Ok(())","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"consider adding a `main` function to `src/main.rs`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0601]\u001b[0m\u001b[0m\u001b[1m: `main` function not found in crate `solana_bpf_helloworld`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0muse borsh::{BorshDeserialize, BorshSerialize};\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse solana_program::{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    account_info::{next_account_info, AccountInfo},\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    entrypoint,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconsider adding a `main` function to `src/main.rs`\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0601`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0601`.\u001b[0m\n"}
